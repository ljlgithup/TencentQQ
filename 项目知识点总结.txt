										腾讯QQ新特效总结
			
		1、自定义测拉面板：
				实现步骤：
				1)，创建ViewDragHelper对象，（使用V4包下，新V4包）
				2)，转交拦截判断，处理触摸事件
				3)，重写回调事件，监听回调
				4)，在回调事件中使用新的API完成新特效
				5)，重写tryCaptureView（），决定子控件是否可以被拖拽
				6)，重写View的onFinishInflate（），在布局填充完成后获取子控件。
				7)，重写View的onSizeChange(),在控件大小发生变化时，可以获取控件的宽、高。
				8)，重写getViewHorizontalDragRange（），获取水平方向的最大拖拽距离
				9)，重写clampViewPositionHorizontal（View child, int left, int dx），决定将要移动的位置（此时还未移动）
				10)，重写onViewPositionChanged（），在控件位置发生变化时，执行伴随动画，更新状态，监听回调
					1、当拖拽左布局时，左布局不动。将左布局的偏移量累加给主布局
					2、左布局执行，缩放，平移，透明动画，为了兼容低版本使用三方库nineoldandroid-2.4.0.jar包（并使用类型估值器（TypeEvaluator））
						ViewHelper.setScaleX(mLeft, evaluate(percent, 0.5f, 1.0f));
						ViewHelper.setScaleY(mLeft, evaluate(percent, 0.5f, 1.0f));
						ViewHelper.setTranslationX(mLeft, evaluate(percent, -mWidth * 0.5f, 0));
						ViewHelper.setAlpha(mLeft, evaluate(percent, 0.3f, 1.0f));
					3、主面板执行，缩放动画
						ViewHelper.setScaleX(mContent,evaluate(percent,1.0f,0.8f));
						ViewHelper.setScaleY(mContent, evaluate(percent, 1.0f, 0.8f));
					4、背景执行透明动画
					getBackground().setColorFilter((Integer) evaluateColor(percent, Color.BLACK,Color.TRANSPARENT), PorterDuff.Mode.SRC_OVER);
					 /**
					     * float类型估值器
					     * @param fraction 分度值
					     * @param startValue 开始值
					     * @param endValue 结束值
					     * @return
					     */
					    public Float evaluate(float fraction, Number startValue, Number endValue) {
						float startFloat = startValue.floatValue();
						return startFloat + fraction * (endValue.floatValue() - startFloat);
					    }
					    /**
					     * 颜色估值器
					     */
					    public Object evaluateColor(float fraction, Object startValue, Object endValue) {
						int startInt = (Integer) startValue;
						int startA = (startInt >> 24) & 0xff;
						int startR = (startInt >> 16) & 0xff;
						int startG = (startInt >> 8) & 0xff;
						int startB = startInt & 0xff;

						int endInt = (Integer) endValue;
						int endA = (endInt >> 24) & 0xff;
						int endR = (endInt >> 16) & 0xff;
						int endG = (endInt >> 8) & 0xff;
						int endB = endInt & 0xff;

						return (int)((startA + (int)(fraction * (endA - startA))) << 24) |
							(int)((startR + (int)(fraction * (endR - startR))) << 16) |
							(int)((startG + (int)(fraction * (endG - startG))) << 8) |
							(int)((startB + (int)(fraction * (endB - startB))));
					    }

				11)，重写onViewReleased（），当控件释放时要处理的事情，判断控件是否要打开，关闭。				
				12)，实现平滑动画（2个步骤）
				13)，（1）触发一个平滑动画，(2)维持一个平滑动画继续。
					int finalLeft = 0;
					if(smooth){
					    // 1. 触发一个平滑动画
					    if(mDragHelper.smoothSlideViewTo(mContent, finalLeft, 0)){
						// true 表示动画没有移动到指定位置。
						// 需要引发界面的重绘
						ViewCompat.postInvalidateOnAnimation(this);// -> drawChild -> child.draw -> computeScroll
					    }
					}else{
					    mContent.layout(finalLeft,0,finalLeft+mWidth,0+mHeight);
					}
					 /**
					     *  2.维持动画的继续
					     */
					    @Override
					    public void computeScroll() {
						super.computeScroll();
						if (mDragHelper.continueSettling(true)) {
						    // true 表示动画没有移动到指定位置。
						    // 需要引发界面的重绘
						    ViewCompat.postInvalidateOnAnimation(this);// -> drawChild -> child.draw -> computeScroll
						}
					    }
				14),	设置ListView平滑的滚动到某个条目。
					Random random = new Random();
					int postion = random.nextInt(Cheeses.NAMES.length);
					lv_left.smoothScrollToPosition(postion);
				15),	给头像设置属性抖动动画。
					//参一；所指的要动画的控件，参二：属性动画，参三：偏移值；
					ObjectAnimator animator = ObjectAnimator.ofFloat(iv_content_head, "translationX", 25.0f);
					animator.setInterpolator(new CycleInterpolator(4.0f));
					animator.setDuration(300);
					animator.start();
				16),	第三方库： nineoldandroids-2.4.0.jar -> Github (Jake Wharton)
					 把属性动画兼容到低版本
				
		2，自定义测拉删除：
			1，创建ViewDragHelper对象，（使用V4包下，Google2013/IO推出的新V4包）
			2，转交拦截判断/处理触摸事件
			3，重写回调监听事件
			4，使用新的API处理滑动事件
			5，重写tryCaptureView（），决定子控件是否可以被拖拽
			6，重写View的onFinishInflate（），在布局填充完成后获取子控件
			7，重写View的onSizeChange(),在控件大小发生变化时，可以获取控件的宽、高
			8，重写getViewHorizontalDragRange（），获取水平方向的最大拖拽距离
			9，重写clampViewPositionHorizontal（View child, int left, int dx），决定将要移动的位置（此时还未移动）
					在该方法中要限制前布局，后布局滑动的范围。
					//限定前布局要拖拽的范围
					    if(child==mFrontView){
						if(left<-mRange){
						    left = -mRange;
						}else if(left>0){
						    left = 0;
						}
					    }
					    //限定后布局要拖拽的范围
					    if(child==mBackView){
						if(left<mFrontWidth-mRange){
						    left = mFrontWidth-mRange;
						}else if(left>mFrontWidth+mRange){
						    left = mFrontWidth + mRange;
						}
					    }
					    return left;
			10，重写onLayout()方法，根据boolean值决定将布局打开还是关闭。
					 /**
					     * 根据boolean决定打开或关闭
					     * @param isOpen
					     */
					    private void computeContent(boolean isOpen) {
						//摆放前布局
						Rect mFrontRect = computeFrontRect(isOpen);
						mFrontView.layout(mFrontRect.left,mFrontRect.top,mFrontRect.right,mFrontRect.bottom);

						//摆放后布局 (后布局的左边距等于前布局的右布局)
						int left = mFrontRect.right;
						mBackView.layout(left,0,left+mRange,0+mFrontHeight);
					    }
					     private Rect computeFrontRect(boolean isOpen) {
						int left = 0;
						if(isOpen){
						    left = -mRange;
						}
						return new Rect(left,0,left+mFrontWidth,0+mFrontHeight);
					    }
			11，重写onViewPositionChanged（），在控件位置发生变化时，执行伴随动画，更新状态，监听回调
					//执行伴随动画将前布局的偏移量传递给后布局，实现后布局跟随前布局移动
					    if(changedView==mFrontView){
						mBackView.offsetLeftAndRight(dx);
					    }else if(changedView==mBackView){
						mFrontView.offsetLeftAndRight(dx);
					    }
					//处理回调监听事件
					    dispatchEvent();

					    //兼容低版本
					    invalidate();
				        -----------------------------------------
					    private void dispatchEvent() {
						//获取前布局的左边距
						left = mFrontView.getLeft();

						//记录上一个状态
						Status lastStatus = status;
						status = UdataStatus();

						//如果状态发生变化，回调监听
						if(lastStatus!=status && listener!=null){
						    if(status==Status.Opent){
							listener.open(this);
						    }else if(status==Status.Close){
							listener.close(this);
						    }else{
							if(lastStatus==Status.Close){
							    listener.onstartOpent();
							}else if(lastStatus==Status.Opent){
							    listener.onstartClose();
							}
						    }
						}
					    }
					    private Status UdataStatus() {
						if(left==-mRange){//打开
						    return Status.Opent;
						}else if(left==0){
						    return Status.Close;
						}
						return Status.Dragging;
					    }
			12，重写onViewReleased（），当控件释放时要处理的事情，判断控件是否要打开，关闭（平滑动画）
					//根据滑动的速度，位置决定打开或关闭动画
					    if(xvel==0 && mFrontView.getLeft()<-mRange*0.5f){
						open();
					    }else if(xvel<-10){
						open();
					    }else {
						close();
					    }
					/**
					     * 根据boolean值，决定平滑打开或关闭动画
					     * @param smooth
					     */
					    private void open(boolean smooth) {
						int finalLeft = -mRange;
						if(smooth){
						     if(mDragHelper.smoothSlideViewTo(mFrontView,finalLeft,0)){
							 //child: 表示要滑动的子控件
							 //finalLeft: 表示最终要移动到的左边距
							 //finalTop: 表示最终要移动到的顶边距
							 // true 表示动画没有移动到指定位置。
							 // 需要引发界面的重绘
							 ViewCompat.postInvalidateOnAnimation(this);// -> drawChild -> child.draw -> computeScroll
						     }
						}else{
						    LayoutContent(true);
						}
					    }
				// 2. 维持平滑动画的继续
				    @Override
				    public void computeScroll() {
					super.computeScroll();
					if(mDragHelper.continueSettling(true)){
					    // true 表示动画没有移动到指定位置。
					    // 需要引发界面的重绘
					    ViewCompat.postInvalidateOnAnimation(this);// -> drawChild -> child.draw -> computeScroll
					}
				    }
			13，给ListView设置Adapter(),将该控件做为条目。
			14，给ListView设置滚动监听，滚动时关闭其它的条目。
				//给ListView设置滚动监听
				lv_list.setOnScrollListener(new AbsListView.OnScrollListener() {
				    public static final int SCROLL_STATE_IDLE = 0;// 静止状态
				    public int SCROLL_STATE_TOUCH_SCROLL = 1;//手指滚动状态
				    public int SCROLL_STATE_FLING = 2;//手指不动了，但是屏幕还在滚动状态。

				    @Override
				    public void onScrollStateChanged(AbsListView view, int scrollState) {
					if (scrollState==SCROLL_STATE_TOUCH_SCROLL){
					    adapter.closeAllItem();
					}
				    }
				    @Override
				    public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {

				    }
				});
		3，自定义粘性控件：
				1，绘制一帧(静态)的图像, 使用固定值, OK
					> 点1->点2 画曲线
						//绘制连接部分
						Path path = new Path();
						//从点1开始绘制
						path.moveTo(mStickPoint[0].x, mStickPoint[0].y);
						//从点1-->点2 绘制曲线(2介曲线)
						path.quadTo(this.mContrlCenter.x, this.mContrlCenter.y, mDragPoint[0].x, mDragPoint[0].y);
						//绘制3介曲线
						path.cubicTo(float x1, float y1, float x2, float y2, float x3, float y3);//绘制三阶曲线
					> 点2->点3 画直线
						path.lineTo(mDragPoint[1].x, mDragPoint[1].y);
					> 点3->点4 画曲线
						path.quadTo(this.mContrlCenter.x, this.mContrlCenter.y, mStickPoint[1].x, mStickPoint[1].y);
					> 点4->点1 画直线
						 //自动封闭
						 path.close();
					//绘制圆
					canvas.drawCircle(mStickCenter.x, mStickCenter.y, computeStickRadius, mPaint);
				2，把固定的值转换成变量, OK
				3，计算真实的变量值, OK
					//计算斜率，正切值
					float offsetX = mStickCenter.x - mDragCenter.x;
					float offsetY = mStickCenter.y - mDragCenter.y;

					if(offsetX!=0){
					    link = Double.valueOf(offsetY / offsetX);
					}

					//计算固定圆的浮着点
					mStickPoint = GeometryUtil.getIntersectionPoints(mStickCenter, computeStickRadius, link);

					//计算拖拽圆的浮着点
					mDragPoint = GeometryUtil.getIntersectionPoints(mDragCenter, mDragRadius, link);

					//计算控制点的坐标
					mContrlCenter = GeometryUtil.getPointByPercent(mDragCenter, mStickCenter, 0.618f);
				4，触摸事件, 定位拖拽圆圆心,OK 
					 switch (event.getAction()){
						    case MotionEvent.ACTION_DOWN:							
							x = event.getRawX();
							y = event.getRawY();
							 mDragCenter.set(x,y);
							 invalidate();//重新绘制
							break;
				5， 根据距离修改固定圆半径, OK
					/**
					     * 通过百分比计算固定圆的半径
					     * @return
					     */
					    private float computeStickRadius() {
						//通过拖拽圆的距离变大，从而逐渐的减小固定圆的大小
						float distance = GeometryUtil.getDistanceBetween2Points(mStickCenter, mDragCenter);
						//计算变化的偏移量0-->400
						distance = Math.min(distance,maxDistance);
						//计算变化的百分比0-->1.0
						float percent = distance/maxDistance;

						//使用估值器通过百分比，计算固定圆半径的变化
						return evaluateValue(percent,mStickRadius,mStickRadius*0.5);
					    }
				6，事件处理
					1. 超出范围, 断开, 没放回去, 消失
					2. 超出范围, 断开, 放回去, 恢复
					3. 没超出范围, 松手, 弹回去
					/**
					     * 触摸修改拖拽圆的位置
					     * @param event
					     * @return
					     */
					    @Override
					    public boolean onTouchEvent(MotionEvent event) {
						 float x;
						 float y;
						switch (event.getAction()){
						    case MotionEvent.ACTION_DOWN:
							onlyDrag = false;//恢复之前的状态
							isShow = true;//恢复之前的状态
							x = event.getRawX();
							y = event.getRawY();
							updataDragCenter(x, y);
							break;
						    case MotionEvent.ACTION_MOVE:
							x = event.getRawX();
							y = event.getRawY();
							//获取两个圆心之间的距离，如果是大于最大距离就只绘制固定圆
							float distance = GeometryUtil.getDistanceBetween2Points(mStickCenter, mDragCenter);
							if(distance>maxDistance){
							    onlyDrag = true;
							}
							//更新拖拽圆的圆心
							updataDragCenter(x, y);
							break;
						    case MotionEvent.ACTION_UP:
							//先判断是否超出最大范围
							if(onlyDrag){
							    distance = GeometryUtil.getDistanceBetween2Points(mStickCenter, mDragCenter);
								if(distance>maxDistance){
								    //1. 超出范围, 断开, 没放回去, 消失
								    isShow = false;
								    invalidate();

								    //播放气泡动画
								    startBubbleAnimator();
								}else{
								    //2. 超出范围, 断开, 放回去, 恢复
								    updataDragCenter(mStickCenter.x, mStickCenter.y);
								}
							}else {
							    //3. 没超出范围, 松手, 弹回去
							    ValueAnimator animator = ValueAnimator.ofFloat(1.0f);
							    animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
								@Override
								public void onAnimationUpdate(ValueAnimator animation) {
								    //获取变化的百分比 0.0-->1.0
								    float fraction = animation.getAnimatedFraction();
								    //获取变化的值
								    PointF point = GeometryUtil.getPointByPercent(mDragCenter, mStickCenter, fraction);
								    //更新拖拽圆的圆心
								    updataDragCenter(point.x, point.y);
								}
							    });
							    animator.setInterpolator(new OvershootInterpolator(10f));
							    animator.setDuration(300);
							    animator.start();
							}
							break;

						    default:
							break;
						}
						return true;
					    }
				7，在松手的位置播放帧动画
						
						WindowManager  mWd = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
						WindowManager.LayoutParams   mParams = new WindowManager.LayoutParams();
						mParams.format = PixelFormat.TRANSLUCENT;
						Handler	handler = new Handler();

						/**
						     * 在松手的位置播放气泡动画
						     */
						    private void startBubbleAnimator() {
							//松手的位置，播放帧动画
							ImageView popview = new ImageView(context);
							popview.setImageResource(R.drawable.bubble_animation);
							AnimationDrawable anmator = (AnimationDrawable) popview.getDrawable();

							final BubbleLayout bubbleLayout = new BubbleLayout(context);
							bubbleLayout.setCenter((int) mDragCenter.x, (int) mDragCenter.y
								- statusBarHeight);

							bubbleLayout.addView(popview, new FrameLayout.LayoutParams(
								(int) Utils.dip2Dimension(35f,context), (int) Utils.dip2Dimension(35f,context)));

							mWd.addView(bubbleLayout, mParams);
							anmator.start();
							
							handler.postDelayed(new Runnable() {

							    @Override
							    public void run() {
								//播放完动画后，要移除该控件
								mWd.removeView(bubbleLayout);
							    }
							}, 505);
						    }
					


